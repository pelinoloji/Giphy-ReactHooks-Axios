{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","data","setData","baseUrl","useEffect","a","async","axios","get","result","status","trending","className","placeholder","onChange","event","target","value","disabled","onClick","parameters","resultUrl","then","catch","error","console","log","loadSearchData","map","gif","key","id","frameBorder","src","embed_url","alt","title","import_datetime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAsEeA,MAlEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,KAIPC,EAAU,wCA6BhB,OA3BAC,qBAAU,0BAAAC,EAAAC,OAAA,sDACS,WACCH,EADD,WADT,WAAAE,EAAA,MAIaE,IAAMC,IAFTL,kDAFV,QAIFM,EAJE,SAK0B,MAAlBA,EAAOC,QACrBR,EAAQO,EAAOR,KAAKU,UANd,uCAQP,IAoBD,yBAAKC,UAAU,OACb,2BACEA,UAAU,QACVC,YAAY,qBACZC,SAAU,SAAAC,GACRf,EAAUe,EAAMC,OAAOC,UAG3B,4BACEL,UAAU,SACVM,UAAWnB,EACXoB,QAAS,YA7BQ,WACrB,IACMC,EAAU,qBAAiBrB,GAC3BsB,EAAYlB,EAFD,SAEsBiB,EAEvCb,IACGC,IAAIa,GACJC,MAAK,SAAArB,GACEA,GAAwB,MAAhBA,EAAKS,QACjBR,EAAQD,EAAKA,KAAKF,WAGrBwB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EAAO,YAiBjBG,KAJJ,QASA,yBAAKf,UAAU,QACZX,EAAK2B,KAAI,SAAAC,GACR,OACE,yBAAKjB,UAAU,MAAMkB,IAAKD,EAAIE,IAC5B,4BAAQC,YAAa,EAAGC,IAAKJ,EAAIK,UAAWC,IAAI,eAChD,2BAAIN,EAAIO,OACR,8BAAOP,EAAIQ,wBCjDLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.46af8f26.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [search, setSearch] = useState(\"\");\n  const [data, setData] = useState([]);\n\n  const baseUrl = \"https://pelin-gifs-api.herokuapp.com/\";\n\n  useEffect(async () => {\n    const endpoint = \"trending\";\n    const resultUrl = baseUrl + endpoint;\n\n    const result = await axios.get(resultUrl); //trending scope\n    if (!!result && result.status === 200) {\n      setData(result.data.trending);\n    }\n  }, []);\n\n  const loadSearchData = () => {\n    const endpoint = \"search\";\n    const parameters = `?searchKey=${search}`;\n    const resultUrl = baseUrl + endpoint + parameters;\n\n    axios\n      .get(resultUrl)\n      .then(data => {\n        if (!!data && data.status === 200) {\n          setData(data.data.search);\n        }\n      })\n      .catch(error => {\n        console.log(error, \"error\");\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        className=\"Input\"\n        placeholder=\"Please Search Gifs\"\n        onChange={event => {\n          setSearch(event.target.value);\n        }}\n      ></input>\n      <button\n        className=\"Button\"\n        disabled={!search}\n        onClick={() => {\n          loadSearchData();\n        }}\n      >\n        Find\n      </button>\n      <div className=\"Gifs\">\n        {data.map(gif => {\n          return (\n            <div className=\"Gif\" key={gif.id}>\n              <iframe frameBorder={0} src={gif.embed_url} alt=\"loading...\" />\n              <p>{gif.title}</p>\n              <span>{gif.import_datetime}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}